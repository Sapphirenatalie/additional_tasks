# Реализуйте в отдельной функции алгоритм Евклида
# (алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел), возвращая НОД.
# Проверить полученную функцию на списке, состоящем из 10 пар чисел
# (пример пар: [[5, 7], [21, 111], [63, 49]]).

# Алгоритм Евклида — это алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел.

# Алгоритм нахождения НОД делением:
# Большее число делим на меньшее.
# Если делится без остатка, то меньшее число и есть НОД (следует выйти из цикла).
# Если есть остаток, то большее число заменяем на остаток от деления.
# Переходим к пункту 1.

# Алгоритм нахождения НОД вычитанием:
# Из большего числа вычитаем меньшее.
# Если результат вычитания не равен 0, то большее число заменяем на результат вычитания.
# Переходим к пункту 1.


list_1 = [[5, 7], [21, 111], [63, 49], [27, 15], [32, 24], [8, 64], [25, 10], [2, 6], [35, 15], [12, 3]]
print('нахождение НОД делением')


def nod_div():
    global res
    for y in list_1:
        for a in y:
            for b in y:
                while a != 0 and b != 0:
                    if a > b:
                        a = a % b
                    else:
                        b = b % a
                    res = a + b
        print(f'{str(y)} =>> {res}')


nod_div()

print('-------')

list_2 = [[5, 7], [21, 111], [63, 49], [27, 15], [32, 24], [8, 64], [25, 10], [2, 6], [35, 15], [12, 3]]
print('нахождение НОД вычитанием')


def nod_sub():
    for y in list_2:
        for a in y:
            for b in y:
                while a != b:
                    if a > b:
                        a = a - b
                    else:
                        b = b - a
        print(f'{y} =>> {a}')


nod_sub()
